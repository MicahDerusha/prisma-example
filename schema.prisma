// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["jsonProtocol"]
    //output = "../../../node_modules/.prisma/client"
}

// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod" // (default) the directory where generated zod schemas will be saved

//   relationModel            = false // (default true) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   useDecimalJs             = false // represent the prisma Decimal type using Decimal.js (as Prisma does)

// //   imports                  = null // (default null) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

datasource db {
    provider = "mysql"
    // url      = env("DATABASE_URL")
    url      = "mysql://root:admin@localhost:3306/prisma_example"
    // provider = "sqlite"
    // url      = "file:./prisma-example.db"
}


model User {
    //Dimensions
    ID String @id @default(nanoid(10)) 

    //Facts
    Email String @db.VarChar(100) 
    Password String @db.VarChar(100)
    First_Name String? @db.VarChar(50) 
    Last_Name String? @db.VarChar(50)

    //Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime? 
    
    //Relations
    Hear_About_Us Hear_About_Us[]
}

model User_Audit {
    Audit_ID String @id @default(nanoid(15)) 
    Action AuditAction 
    //Dimensions
    ID String  

    //Facts
    Email String @db.VarChar(100) 
    Password String @db.VarChar(100)
    First_Name String? @db.VarChar(50) 
    Last_Name String? @db.VarChar(50)

    //Metadata
    createdAt DateTime 
    updatedAt DateTime 
    deletedAt DateTime? 

    auditCreatedAt DateTime @default(now())
}


model Hear_About_Us {
    @@unique([User_ID, HearAboutUs])
    //Dimensions
    ID String @id @default(nanoid(10)) 
    User_ID String

    //Facts
    HearAboutUs HearAboutUs

    //Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    deletedAt DateTime? 
    
    //Relations
    User User @relation(fields: [User_ID], references: [ID])
}


model Hear_About_Us_Audit {
    Audit_ID String @id @default(nanoid(15)) 
    Action AuditAction 
    //Dimensions
    ID String
    User_ID String

    //Facts
    HearAboutUs String

    //Metadata
    createdAt DateTime
    updatedAt DateTime
    deletedAt DateTime? 
    
    //Relations
}

enum AuditAction {
    CREATE
    UPDATE
    UPSERT
    DELETE
}

enum HearAboutUs {
    LinkedIn
    Friend
    Twitter
}